<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: domains | Catch me code]]></title>
  <link href="http://catchmecode.com/blog/categories/domains/atom.xml" rel="self"/>
  <link href="http://catchmecode.com/"/>
  <updated>2013-10-05T22:34:40+02:00</updated>
  <id>http://catchmecode.com/</id>
  <author>
    <name><![CDATA[Jonas Lundberg]]></name>
    <email><![CDATA[jonasl@catchmecode.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Get yourself a fast project]]></title>
    <link href="http://catchmecode.com/blog/2013/08/26/get-yourself-a-fast-project/"/>
    <updated>2013-08-26T20:56:00+02:00</updated>
    <id>http://catchmecode.com/blog/2013/08/26/get-yourself-a-fast-project</id>
    <content type="html"><![CDATA[<p>Before delving into this, learning is good ok? We&rsquo;re all here to learn something (queue monthy python: Large group &ndash; &ldquo;Yes, we&rsquo;re all here to learn!&rdquo; &hellip; One guy in the back &ndash; &ldquo;I&rsquo;m not&rdquo;) but it&rsquo;s easy to get derailed with details when there&rsquo;s just so much exciting stuff out there.</p>

<h2>New tech = initial bump</h2>

<p>I&rsquo;m assuming this happens to most folks and it gets worse the more to the left you are on the <a href="http://en.wikipedia.org/wiki/Technology_life_cycle#Technology_perception_dynamics">adoption curve</a> of a new technique. You are psyched up and ready to get cracking &ndash; only to be immensely slowed down by just setting up a dev environment or getting &ldquo;hello world&rdquo; to compile / interpret / just run dammit. The early adopters are ok with this &ndash; or even thrive of going through the rough phases where everything barely holds together (I&rsquo;m guessing because you have more influence then. You are actually making a difference).</p>

<p>But but but&hellip; being the early adopter of the newest and shiniest things have an opportunity cost &ndash; you&rsquo;re going to spend much more time on getting the new thing to work and less time on things not related to the language / framework itself. And that&rsquo;s ok if that is your thing &ndash; using the newest stuff. Maybe you&rsquo;ll even make yourself a name should you write the first web-framework or templating engine in your new language. But it should be a conscious choice staying in the left on the adoption curve. I&rsquo;ve often gone this road without thinking of the opportunity cost of doing so. My goal was often to make something cool, but just because I could it would often be using the latest upcoming languages. And that meant that the cool things I set out to make withered when the initial bump set in.</p>

<h2>The initial bump</h2>

<p>With the initial bump I mean that not only that you&rsquo;re not experienced in the new language, things take longer time because less time have been put into get things to work. Documentation is not there yet, libraries break with new versions, you get errors just trying to setting up the dev enviroment, error messages are obscure and no one else seems to have all the problems you&rsquo;re having.</p>

<p>The initial bump extends beyond just getting a working dev environment up and running. It also means less powerful IDE / editors, less tools (e g debugging, package management, build systems) and less frameworks and libraries with respectively less production time under their wings to choose from. In short, you&rsquo;ll do more work because less time has been put into the thing you&rsquo;re trying to run. And that costs &ndash; in time and focus.</p>

<p>The perhaps unglamorous alternative to this is using stuff you know well. Chances are that this is to the right on the adoption curve. But it&rsquo;ll buy you something &ndash; time and focus.</p>

<h2>Old tech = new domain?</h2>

<p>By using the tools, frameworks and language you know best you&rsquo;ll steer clear of the initial bump. And you&rsquo;ve freed up time to explore another side of programming &ndash; getting to know a new domain and solving its problems not being slowed down by your tools.</p>

<p>It&rsquo;s like learning to drive vs driving, at first you&rsquo;re so occupied with the mechanics of driving that you can&rsquo;t be bothered with the traffic ahead. Its first when you know the mechanics that you can focus on the actual driving from A to B.</p>

<h2>Possibly leverage with a new language</h2>

<p>If you&rsquo;ve made a prototype using tools you know you&rsquo;re in a much better spot of rewriting it in some other language / framework. You are now choosing tools based on your domain knowledge, this is a huge advantage &ndash; you&rsquo;re running the tools and not vice versa.</p>

<h2>Leverage old tech and iterate faster</h2>

<p>Again, a <a href="http://catchmecode.com/blog/2013/07/15/fast-programmers/">speech about going fast</a>. But really, I think that pragmatism and knowing when it&rsquo;s good enough is highly learnable. But you got to set out doing so with a clear mind. Using the languages, tools and stuff you know best will let you focus 100% on going fast in a new domain. Churn out really dirty but working code just to experience and get the feel of what it&rsquo;s like. It&rsquo;s ok, set out milestones when you refactor and tidy up.</p>

<p>At least for me, when trying out a new idea its important to go fast from idea to prototype. Instead of getting stuck in the setup and loosing steam (and possibly even giving up on the idea before its even been test driven) &ndash; leverage everything you possibly can to get it to a working state. By using the tech you know you probably also know what frameworks and libs to use (and chances are that there&rsquo;s plenty more of them out there since again you&rsquo;re using a language with more adopters) you compound on your existing knowledge. You can make more critical judgments on claims of what works (for you) and what does not.</p>

<p>This also ties in with a lot of blogposts I&rsquo;ve been reading on startups. Many of those who succeed <a href="http://www.paulgraham.com/13sentences.html">launch fast and get it right afterwards</a> &ndash; screw the details, we&rsquo;ll figure those out later when we&rsquo;re actually making some money. By using tools and products you know you&rsquo;ll steer clear of the inital bump, and if you&rsquo;re wise you stay to the right on the adoption curve, where there are powertools, battle proven VMs and industrial strength IDE&rsquo;s. It&rsquo;s ok &ndash; if you succeed you now have a luxury problem of switching languages and frameworks. With all that knowledge of what did and didn&rsquo;t work.</p>

<h2>Do share</h2>

<p>Now I&rsquo;m aware that by using older tech you are piggybacking on those that did take time to get things working and writing frameworks etc. And by doing so you might not have something as tangible as a fresh framework to share (or if you do its of less value beeing the nth framework of that kind and not the first or second).</p>

<p>But, you can share the domain problems you ran into and how you solved them. Hopefully that&rsquo;ll feedback to those on the forefront of some new tech getting perspective on what they build might be used to solve &ndash; problems rarely change that much regardless of tech. So you know, at least send some love to those brave enough to not take this advice and to go head on with the left of the adoption curve.</p>
]]></content>
  </entry>
  
</feed>
