<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: jetty | Catch me code]]></title>
  <link href="http://catchmecode.com/blog/categories/jetty/atom.xml" rel="self"/>
  <link href="http://catchmecode.com/"/>
  <updated>2013-12-18T22:20:39+01:00</updated>
  <id>http://catchmecode.com/</id>
  <author>
    <name><![CDATA[Jonas Lundberg]]></name>
    <email><![CDATA[jonasl@catchmecode.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Jar as a service on windows]]></title>
    <link href="http://catchmecode.com/blog/2013/11/27/jar-as-a-services-on-windows/"/>
    <updated>2013-11-27T22:15:00+01:00</updated>
    <id>http://catchmecode.com/blog/2013/11/27/jar-as-a-services-on-windows</id>
    <content type="html"><![CDATA[<p>When <a href="/blog/2013/08/01/jetty-multiple-instances/">setting up jetty</a> I wanted to start it with the start.jar file &ndash; since this builds some useful stuff like paths etc. I searched some for how to run a jar as a service, but came up mostly empty handed (there were some &ndash; do like this, but none found went into enough detail on what &ldquo;like this&rdquo; actually meant).</p>

<p>There are a couple of <a href="http://stackoverflow.com/questions/1617458/how-to-create-windows-service-from-java-jar">options</a>, but most seemed quite hack-ish. I wanted a way that could easily be reproduced on multiple machines moving from test to production environment.</p>

<h2>Run Procrun, run!</h2>

<p>For this we&rsquo;ll go with what the fine folks over at apache has built: <a href="http://commons.apache.org/proper/commons-daemon/">commons-daemon</a></p>

<p>You&rsquo;ll need the windows version which is not the one you&rsquo;ll find on the main page download. Its found here:
<a href="http://www.apache.org/dist/commons/daemon/binaries/windows/">http://www.apache.org/dist/commons/daemon/binaries/windows/</a></p>

<p>Extract the .zip to a folder on your disk where you remember it. The important files are the binaries in the unzipped folder &ndash; one prunsrv for managing the services command line, and one prunmgr for editing existing services in a GUI.</p>

<p>This post will show the GUI way, but everything can be converted to a script for easy installing on several machines.</p>

<h2>How many bits?</h2>

<p>Now, before you run off installing services to the left and right, take a moment and note if you&rsquo;re running a 32 or 64-bit version of windows. The prunsrv version found in the root of the commons daemon install is compatible with a 32-bit windows.</p>

<p>So if you&rsquo;re on 64-bit you need to go into the amd64 folder one level down from the root install to find prunsrv compatible with 64-bit. If you use the wrong version to install the service it will not start.</p>

<h2>Installing it</h2>

<p>Using the right version of prunsrv open up a cmd.exe and enter <code>prunsrv //IS//&lt;Service name&gt;</code>. This will install an empty service.</p>

<p>To set up the service in a GUI enter  <code>prunmgr //ES//&lt;Service name&gt;</code>. Heres what you should see (all fields being empty at first):</p>

<h2>General settings</h2>

<p><img src="/images/blog/2013/11/25/commons-daemon/commons_general_settings.png" alt="General tab in commons GUI" /></p>

<p>In the path to executable read only field you can spot what version you used to install the service with. If it points directly to the root install folder its the 32-bit version. If its under an amd64 subfolder to the root install &ndash; it will start the service as a 64-bit version.</p>

<p>The startup type controls the usual windows settings &ndash; how the service is started (manual, automatic or disabled).</p>

<p>The log on tab is pretty self explanatory, its what user the service will run under.</p>

<h2>Logging settings</h2>

<p><img src="/images/blog/2013/11/25/commons-daemon/commons_logging_tab.png" alt="Logging tab in commons GUI" /></p>

<p>The level of logging concerns the actual commons procrun service itself &ndash; it will print stuff like &lsquo;starting service X&rsquo; and &lsquo;stopping service X&rsquo; to the logs. It can come handy if your service restarts without you knowing it and you have to figure out why it happened.</p>

<p>Log prefix controls what the log file will be called. The log file is rotated daily. By setting redirect stderr and stdout to auto the jar application stdout and stderr will also be appended to their own respective logfiles in the same directory. These are also rotated daily.</p>

<p>When running jetty the auto does not add anything extra since jetty logs its own stdout and stderr to configurable files. But any other application that does not will be captured so it doesn&rsquo;t hurt to have them set as auto.</p>

<h2>Java settings</h2>

<p><img src="/images/blog/2013/11/25/commons-daemon/commons_java_tab.png" alt="Java tab in commons GUI" /></p>

<p>I didn&rsquo;t have any luck using the &ldquo;Use default&rdquo; setting for the JVM. I had to point out the exact dll &ndash; maybe you don&rsquo;t. But If you do: you&rsquo;ll need the bin\client\jvm.dll (or the server equivalent if you&rsquo;re on 64 bit) as your virtual machine.</p>

<p>In the java classpath, point out the jar you want to run as a service &ndash; in this case the start.jar from jetty.</p>

<p>In the Java options you can send parameters to the jvm process itself. <strong>All of these must be separated with newline</strong>. Small gotcha that took a while to figure out.</p>

<h2>Startup settings</h2>

<p><img src="/images/blog/2013/11/25/commons-daemon/commons_startup_tab.png" alt="Startup tab in commons GUI" /></p>

<p>Here you point out in what class the start method resides and what its called.</p>

<p>The arguments are passed to your main method, note that you also need to separate these with newline here.</p>

<h2>Shutdown settings</h2>

<p><img src="/images/blog/2013/11/25/commons-daemon/commons_shutdown_tab.png" alt="Shutdown tab in commons GUI" /></p>

<p>Same here, what class and method to call when shutting down the service. Jetty uses the same with a command line parameter &mdash;stop to shut down the service.</p>

<p>An optional timeout in seconds can be set before the service is killed hard.</p>

<p>As said on the outset, all of these settings can also be inputted as command line parameters to the prunsrv.</p>

<h2>Reverting</h2>

<p>If you do something wrong or just get tired of running services &ndash; its deleted with <code>prunsrv //DS//&lt;Service name</code></p>

<h2>Troubleshooting</h2>

<p>If everything goes as expected there will be some bumps before its smooth sailing.</p>

<p>The logs can be of help, also useful for getting more error messages on why it did not start is running it first via the console <code>prunsrv //TS//&lt;ServiceName&gt;</code> &ndash; it will hopefully output something you can google on.</p>

<h2>Didn&rsquo;t happen!</h2>

<p>What&rsquo;s remarkable is how hard it is to write a large post on windows and not even once mention that I pity for you being stuck on Windows! I&rsquo;m maturing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jetty multiple instances]]></title>
    <link href="http://catchmecode.com/blog/2013/08/01/jetty-multiple-instances/"/>
    <updated>2013-08-01T21:09:00+02:00</updated>
    <id>http://catchmecode.com/blog/2013/08/01/jetty-multiple-instances</id>
    <content type="html"><![CDATA[<p>Having fought Jetty the last couple of days I&rsquo;d thought I&rsquo;d document this. Its not such a far fetched use case &ndash; running multiple webservers from the same installation.</p>

<h2>Background</h2>

<p>First off, if you&rsquo;re thinking about using Jetty &ndash; do it! Jetty is pretty awesome and with the event of jetty 9 moving its documentation to <a href="https://github.com/jetty-project/jetty-documentation">github</a> it has really taken off. It used to be a bit arcane with little documentation, but I&rsquo;m really impressed with Jetty 9 so far. Its open source and its pretty simple to get up and running.</p>

<p>However Jetty seems more geared towards the &ldquo;simple&rdquo; use case of embedding it or running it for deploying one or maybe a few webapps from the <code>webapps/</code> directory using one instance. While that&rsquo;s part of the simple to get up and running deal it wasn&rsquo;t too obvious how to get several instances from the same install (i e the dev, stage and production instances).</p>

<h2>Y u want servers?</h2>

<p>So, why all this? The reasons were these: the production server runs only on one install with one webapp. Staying as close to the production setup spares some gray hairs. Also Jetty can only set one debug port per instance and since its the same code base but different versions of it, it would be difficult to catch your request to a specific version &ndash; you&rsquo;d have to somehow filter on the incoming request path in your breakpoint if its even possible. Plus only one webapp can be mapped to the root context <code>/</code>.</p>

<p>At the same time wanting to avoid maintenance and hard to find bugs due to version differences when upgrading it should all be served from the same install.</p>

<h2>Webapp folder structure</h2>

<p>Here&rsquo;s the setup I went for: All applications are kept under the same folder (webapps/ in the Jetty installation). This stemmed mostly from experience that Jetty seems very tied to its installation folder. Running things from elsewhere turned up paths not found errors. This might be possible to do with system properties, but I didn&rsquo;t manage to get them into all places they needed to go. Staying with the Jetty installation folder as a base makes it more portable as you can use the install dir as a starting path for everything. So a fresh install should (in theory) just be to move the webapps folders into the new installations webapps folder.</p>

<p>The folder structure looks like this:
```
  | &ndash; etc
  &hellip;
  | &ndash; webapps</p>

<pre><code>| - dev
  | - dev.xml
  | - dev.war
  | - start.d
| - dev.ini
| - dev_jetty_config.xml
| - stage
  | - stage.xml
  | - stage.war
  | - start.d
    | - stage.ini
    | - stage_jetty_config.xml
...
</code></pre>

<p>```</p>

<p>We&rsquo;ll get to the start.d folders in the hot deploy section.</p>

<h2>.ini vs .xml</h2>

<p>A custom <code>.ini</code> per app &ndash; according to the docs this is just command line parameters to the jvm and can be passed as such. But I like command line parameters more in a file so you can put it in version control and deploy it with the webapp. If its buried in command line switches you&rsquo;d have to go and edit the windows service by hand each time something changed &ndash; and as the rule goes: If it involves manual steps &ndash; doh, I forgot!</p>

<p>Also you need an <code>jetty.xml</code> file per app. The Jetty docs says that you can edit the <code>etc/</code> files (e g <code>etc/jetty.xml</code>) in the install to contain several server configs but this sounds again like maintenance problems to me. By putting all config for one instance in one xml you can also keep it in your scm and deploy it with the app itself so it can move with the code.</p>

<p>In this setup the <code>dev.ini</code> contains only jvm parameters such as remote debug ports &ndash; I kept the rest in xml (no real reason, mostly because its easier to have all config in one file &ndash; and that file is the xml file since not all config can go into the <code>.ini</code> file)</p>

<h2>Xml file structure</h2>

<p>The meat of a server instance configuration goes into its xml file.</p>

<p>Each instance needs its own unique <code>&lt;Configure id="dev" class="org.eclipse.jetty.server.Server"&gt;</code> tag &ndash; its in the docs, but not so <a href="http://www.eclipse.org/jetty/documentation/current/serving-webapp-from-particular-port.html#creating-server-instances">easy to find</a>. It does not mention however if this applies when running in separate jvm:s or if it only applies in the same jvm. Better safe then sorry and have a separate tag for each separate jvm instance.</p>

<p>Start with the <code>jetty.xml</code> as a base &ndash; then cut and paste goodies from the other <code>etc/*.xml</code> files as you go into your own single <code>.xml</code> file. I ended up editing out some parts that were not interesting in hindsight, but I thought it was a better approach to get it all in there and then remove things that were not interesting afterwards.</p>

<h2>Hot deploy</h2>

<p>This was a treat. We do continuous integration with the latest version built and deployed directly, so having Jetty scan a directory and hot-deploy anything uploaded there was a perfect fit. It saves some scripts shutting down the service, waiting for it to finish, ftp the .war file and starting up the service again.</p>

<p>Since the hot deploy scanner can only be set on a single dir this was done via context-descriptor files and separate dirs for each instance (deploying all webapps to the same folder would not work since all instances would pick up all files).</p>

<p>Jetty ignores any folder named <code>*.d</code>, so the start.d folders inside the webapps are used for the config files (e g <code>dev.ini</code> and <code>dev_jetty_conf.xml</code>). This way all config can be <a href="ftp:ed">ftp:ed</a> up to the webapp and start.d folder keeping them in sync.</p>

<p>The hot deploy mechanism scans for <code>.xml</code> and <code>.war</code> files (in that order). But because the context path (where the webapp is accessed under) is set to the folder it resides in (i e <code>http://localhost:8080/dev</code>) by default you also need a context path file named the same as the <code>.war</code> file (e g <code>dev.xml</code> for the dev webapp). The web-context file contains only what war and under what path it is served from.</p>

<h2>Test it</h2>

<p><code>bash
$&gt; java -jar start.jar --ini==dev/start.d/dev_jetty_config.ini dev/start.d/dev.xml
</code></p>

<p>In the Jetty installation folder and see what happens. Jetty will complain if some xml is malformatted or tags out of place, took some googling to correct the errors but nothing paramount.</p>

<p>If you&rsquo;re on windows there&rsquo;s now a follow up post on how to <a href="/blog/2013/11/27/jar-as-a-services-on-windows/">run the start.jar as a service</a>.</p>

<h2>Troubleshooting config errors</h2>

<p>The config you have in <code>.xml</code> files are merely read by a reflection framework for instantiating the corresponding java code, so you could actually type in the corresponding code you have in your xml and debug the error straight from your IDE if some config error trips you up. Didn&rsquo;t do this, but it helps explain the error messages from Jetty more.</p>

<p>As a last resort &ndash; get the source for Jetty &ndash; if you get error-messages in the terminal or stderr log it can be checked against the source to get a hint of what&rsquo;s failing. It helped me, you know, <a href="/blog/2013/06/15/bug-repellants/">don&rsquo;t try at random &ndash; get verifiable facts</a>.</p>

<h2>Multiple instances</h2>

<p>You&rsquo;re almost there! Create another with the same folder structure as dev (stage in the folder structure above) and change every reference in folders and files to stage instead. You&rsquo;re now serving dev and stage from the same install with diffrent instances.</p>

<h2>Finally &ndash; example files</h2>

<p>And since you&rsquo;ve made it all the way down &ndash; here&rsquo;s the <a href="https://github.com/jonaslu/jettyconfigs">example setup files in a repo</a>. Oh, don&rsquo;t worry &ndash; the password and the keystore are the default that Jetty ships with.</p>
]]></content>
  </entry>
  
</feed>
