<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: languages | Catch me code]]></title>
  <link href="http://catchmecode.com/blog/categories/languages/atom.xml" rel="self"/>
  <link href="http://catchmecode.com/"/>
  <updated>2013-11-27T22:25:33+01:00</updated>
  <id>http://catchmecode.com/</id>
  <author>
    <name><![CDATA[Jonas Lundberg]]></name>
    <email><![CDATA[jonasl@catchmecode.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java is verbose? Hurray!]]></title>
    <link href="http://catchmecode.com/blog/2013/10/30/java-is-verbose-hurray/"/>
    <updated>2013-10-30T21:15:00+01:00</updated>
    <id>http://catchmecode.com/blog/2013/10/30/java-is-verbose-hurray</id>
    <content type="html"><![CDATA[<p>Java has been declared dead for so long that its refreshing to see some <a href="http://zeroturnaround.com/rebellabs/10-reasons-why-java-now-rocks-more-than-ever-part-1-the-java-compiler/">recent posts</a> actually <a href="http://www.drdobbs.com/jvm/if-java-is-dying-it-sure-looks-awfully-h/240162390">disputing this</a>.</p>

<p>One popular argument for its oncoming demise is that its syntax is being overly verbose. While I agree on some of it (I&rsquo;d love to have some way of generating simple getters and setters built in to the language) the verbosity does buy you something in return:</p>

<h2>No golf</h2>

<p>There is no java golf (based my thorough research of checking the first page on googling java golf vs perl golf) and that&rsquo;s a good thing. There&rsquo;s usually only one way to do it. As discussed in <a href="blog/2013/04/24/the-next-big-language/">the next big languge</a> I think that&rsquo;s why Java has fared (and continues to) fare so well &ndash; it&rsquo;s syntax.</p>

<p>There is little debate in the Java camp how you write a piece of code the most Java way. More syntactically liberal languages frequently has this: what is the most idiomatic way to write X in language Y?</p>

<p>At a larger project more liberal syntax will turn into a problem because the variations on how you write something slows down the understanding (and thusly the ideas communicated via code). So companies usually set some convention and coding standard &ndash; limiting the liberal syntax. Why not have this built in with the compiler enforcing the standard already and save the pain of setting the standard. These standards will usually boil down to limit the same things java does via its syntax &ndash; increase readability and decrease the surprise factor.</p>

<p>A bit boring perhaps, but limiting individual style will ensure that code being read is understood faster because variations in syntax will not get in the way.</p>

<h2>Corporate yet open source</h2>

<p>Despite being viewed as a corporate language &ndash; and the hallmarks of corporatism being patents and closed wall gardens &ndash; most java libraries and indeed the reference java implementation itself <a href="http://openjdk.java.net/">OpenJDK</a> is open source. Politics aside, having a large open source base to choose from means more examples of how you accomplish stuff. See it as a large array of real life example tutorials (without boring prose).</p>

<h2>Verbosity and open source</h2>

<p>So viewing the open source space as a large project &ndash; since the code standard is set for you (via the compiler) &ndash; when you open someone elses library or project &ndash; you will more quickly know what they meant. The groking time is less because theres fewer ways of writing it. Do not underestimate this point.</p>

<p>If you aim for your project to go anywhere chances are you will use at least a couple of external libraries. The verbose syntax is easily recouped trying to grok those libraries. If all goes as it usually does you will spend some time stepping and debugging those external libraries enjoying the flip side of a verbose syntax &ndash; you get it! Fast!</p>

<h2></h2>

<p>As all of these qualities are geared towards larger projects they might be a small penalty to pay if you are using it for one off projects or small side stuff. Might</p>

<p>Java is still my go to language if:</p>

<ul>
<li>Its more than a couple of files involved</li>
<li>More than me involved (now or if anticipated in the future)</li>
<li>It running the application on any another machine than my dev rig</li>
</ul>


<p>As the verbose syntax pays off in these cases. Only on small one man projects or scripts would I use something else. Do note that this is for projects aimed at going somewhere. There should always be room for experimenting in your programming diet. Experimenting is for learning new languages and ideas on how to code and should not be confused with getting a project off the ground.</p>

<p>So don&rsquo;t feel bad because you need to use java on your new android project. You&rsquo;ll recoup the extra keystrokes spent on kludgy syntax with less time trying to understand and debug.</p>

<h2>News &ndash; I&rsquo;m on twitter</h2>

<p>Follow me for updates on new posts:
<a href="https://twitter.com/catchmecode" class="twitter-follow-button" data-show-count="false">Follow @catchmecode</a></p>

<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The next big language]]></title>
    <link href="http://catchmecode.com/blog/2013/04/24/the-next-big-language/"/>
    <updated>2013-04-24T21:57:00+02:00</updated>
    <id>http://catchmecode.com/blog/2013/04/24/the-next-big-language</id>
    <content type="html"><![CDATA[<p>This is a hot topic, there&rsquo;s no shortage of blog posts already. So all the reason for me to join in and throw my prediction in the pile.</p>

<p>But first a trip down memory lane. The first language used in teaching I encountered was <a href="http://en.wikipedia.org/wiki/Pascal_(programming_language%29">Pascal</a>. The more I&rsquo;ve thought about it the more it stands that this was for a good reason. Pascal had strictness on form built into the language. Turns out this even had a name wich I didn&rsquo;t know about &ndash; <a href="http://en.wikipedia.org/wiki/Structured_programming">structured programming</a>.</p>

<h2>Why Pascal was used</h2>

<p>There was more to Pascal besides the actual mechanics of programming &ndash; to emphasize structure and form. In the small you were given your first lesson in how to successfully communicate your ideas through code. Most probably this was only to your teacher for passing the assignments or for your future self revisiting the code some months down the line. But it was an important first lesson.</p>

<h2>Java/C# is the Pascal of the industry</h2>

<p>The much cursed verbosity of these languages are actually IMHO their reason for making it as an industrial language. They force you to flesh out more on your intent and expose more details (that&rsquo;s where the devil hides) of your ideas. More typing for you &ndash; but more benefits for the large team or corporation.</p>

<p>I think this is why javascript is having a resurgence and why node.js has been so successful &ndash; the introduction of the module pattern and that variables and functions are hoisted to the top of each function. It&rsquo;s really a blessing in disguise because you&rsquo;re now forced by <a href="http://en.wikipedia.org/wiki/Douglas_Crockford">Crockford</a> via <a href="http://www.jslint.com/">jslint</a> to declare variables in the top of the function. This helps clear up intentions. Same goes with the module pattern. You&rsquo;re more bound to one common form and others can more easily spot what you&rsquo;re trying to convey.</p>

<p>Java has this built in &ndash; you&rsquo;re forced to follow a pretty strict pattern when writing code. Perl does not and I&rsquo;m thinking this is why it hasn&rsquo;t been used that much for large projects despite being around for so long. Its good for the one-off scripts that you and a few of you&rsquo;re colleagues on the same team will read. But if you scale it up &ndash; there&rsquo;s <a href="http://perl.plover.com/obfuscated/">too much freedom</a> or rather too much room for personal style. Ideas will be hard to convey unless everyone agrees on a formal standard and what better way to enforce a standard than built into a language?</p>

<h2>The form should help collaboration</h2>

<p>Every new programming language that&rsquo;s coming out is touting type less get more done as its main selling point. Its an amicable aim to reduce the amount of code having to be written since bugs tend to correlate with the lines of code. There will be abundant examples of how you can write this or that problem in so few lines of code compared to that language. All good so far, its got to start somewhere and you the programmer is its main target for adoption.</p>

<p>But how few lines of code you can write something isn&rsquo;t really a good gauge of a new language. How well someone can understand your intent of the code you wrote is much more so. Remember that you&rsquo;re seldom writing code for yourself but most of it for others (or your future self that tends to forget what that so compact one liner really meant).</p>

<p>This has to be if not more important than at least as important as reducing the lines of code. The reduction should only be made if the intent and message is still as clear sans the lines reduced.</p>

<h2>The next big language</h2>

<p>My bet is that it will be strict on form and structure. It maybe will reduce the lines of code somewhat, but not by as much as you&rsquo;d hope for &ndash; because transparency cannot be sacrificed for terseness. It just won&rsquo;t work across larger code bases and teams.</p>

<p>I think it won&rsquo;t be decided by you the programmer as much as it will be decided by teams trying to get stuff done. In true pragmatic fashion lanugages that do not convey the message clearly enough will be thrown out in favour for languages that do. Call it democracy by pragmatism.</p>
]]></content>
  </entry>
  
</feed>
