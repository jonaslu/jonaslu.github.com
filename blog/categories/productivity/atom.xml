<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: productivity | Catch me code]]></title>
  <link href="http://catchmecode.com/blog/categories/productivity/atom.xml" rel="self"/>
  <link href="http://catchmecode.com/"/>
  <updated>2013-12-18T22:20:39+01:00</updated>
  <id>http://catchmecode.com/</id>
  <author>
    <name><![CDATA[Jonas Lundberg]]></name>
    <email><![CDATA[jonasl@catchmecode.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Get it right]]></title>
    <link href="http://catchmecode.com/blog/2013/12/18/get-it-right/"/>
    <updated>2013-12-18T21:30:00+01:00</updated>
    <id>http://catchmecode.com/blog/2013/12/18/get-it-right</id>
    <content type="html"><![CDATA[<p>How to be faster? Simple, just get it right the first time! Duh.</p>

<p><img src="/images/blog/2013/12/18/getitright/Its_done.jpg" alt="When its done - its done!" /></p>

<p>In an ideal world, you&rsquo;d sit down, start typing and word by word, line by line filling files until you&rsquo;re done. This is the shortest possible time the task could be wrapped up in.</p>

<p>Meanwhile in the real world things don&rsquo;t work out that way. But what if we could aim for it? Or at least try to work our way backwards to see if some ideas can be applied? Lets go for as close to right the first time as possible.</p>

<h2>Time thieves</h2>

<p>Where then is time spent that would not be spent if you did it correctly the first time? Here&rsquo;s my list: renaming things, refactoring things, removing things and experiments that didn&rsquo;t work out.</p>

<h2>Renaming things</h2>

<p>Its been said that naming things are <a href="http://martinfowler.com/bliki/TwoHardThings.html">one of two hard things</a> so there will be some percentage of renaming. But what if you could raise the percentage of correctly named variables from the start?</p>

<p>Now assuming you do not still name your variables test1 and stuff2 when you start out (if you do &ndash; stop. Its going to go overboard when you can&rsquo;t keep everything in your head anymore).</p>

<p>What could be made to improve naming things correctly the first time?</p>

<h2>Prime your mind</h2>

<p>A big factor for me when getting names wrong is not taking in the entire context before starting. Some time spent priming your mind might be a good investment.</p>

<p>Get a quick overview of the problem and try note down some of the keywords. Also look at the vicinity of there the code is going in. Are there any visible naming schemas already in place?</p>

<h2>Be consistent!</h2>

<p>I also tend to fluctuate between files when naming similar things. Staying consistent across files will either be correct from the start &ndash; and you need to change nothing &ndash; or more easily fixed with a grep or similar should you change your mind later.</p>

<p>Also &ndash; start with one schema and stick with it until you&rsquo;re almost done. Then change everything in one fell swoop. If you are consistent but often changing your mind you will also be wasting time renaming and then renaming again. Wait a bit for it and see how it pans out before deciding if it was right or wrong.</p>

<h2>Refactoring</h2>

<p>Your code works and has correct variables but its all over the place. You move things in place and create more classes to spread things out in a way that makes more sense.</p>

<p>But some of these refactorings would maybe not be necessary. This is especially true for small experiments or trying things out.</p>

<p>Often you know much earlier what should be moved and what should not. Don&rsquo;t let your code pick up smells &ndash; these will cost more to fix later on. So lean on splitting things out earlier (even though naming the new things will be taxing).</p>

<h2>Removing things</h2>

<p>This is things like commented out or dead code. Again these tend to crop up during the experimenting phase when you get a feel for the problem.</p>

<p>All of these linger because you decided to keep them there (possibly because they might be used again in the future).</p>

<p>If they are cleaned out the minute they become obsolete there is less cleaning to do in the end.</p>

<p>Use a versioning tool like git if you need to revert or bring something back &ndash; but get it out of your files and your head until you really need it again.</p>

<h2>First as the final version</h2>

<p>All of this is geared towards making your first effort something with the same standard as the end product.</p>

<p>A few minutes on naming schemes, how code grows during development and keeping it clean along the way will pay off big &ndash; with lesser iterations before getting it right.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get yourself a fast project]]></title>
    <link href="http://catchmecode.com/blog/2013/08/26/get-yourself-a-fast-project/"/>
    <updated>2013-08-26T20:56:00+02:00</updated>
    <id>http://catchmecode.com/blog/2013/08/26/get-yourself-a-fast-project</id>
    <content type="html"><![CDATA[<p>Before delving into this, learning is good ok? We&rsquo;re all here to learn something (queue monthy python: Large group &ndash; &ldquo;Yes, we&rsquo;re all here to learn!&rdquo; &hellip; One guy in the back &ndash; &ldquo;I&rsquo;m not&rdquo;) but it&rsquo;s easy to get derailed with details when there&rsquo;s just so much exciting stuff out there.</p>

<h2>New tech = initial bump</h2>

<p>I&rsquo;m assuming this happens to most folks and it gets worse the more to the left you are on the <a href="http://en.wikipedia.org/wiki/Technology_life_cycle#Technology_perception_dynamics">adoption curve</a> of a new technique. You are psyched up and ready to get cracking &ndash; only to be immensely slowed down by just setting up a dev environment or getting &ldquo;hello world&rdquo; to compile / interpret / just run dammit. The early adopters are ok with this &ndash; or even thrive of going through the rough phases where everything barely holds together (I&rsquo;m guessing because you have more influence then. You are actually making a difference).</p>

<p>But but but&hellip; being the early adopter of the newest and shiniest things have an opportunity cost &ndash; you&rsquo;re going to spend much more time on getting the new thing to work and less time on things not related to the language / framework itself. And that&rsquo;s ok if that is your thing &ndash; using the newest stuff. Maybe you&rsquo;ll even make yourself a name should you write the first web-framework or templating engine in your new language. But it should be a conscious choice staying in the left on the adoption curve. I&rsquo;ve often gone this road without thinking of the opportunity cost of doing so. My goal was often to make something cool, but just because I could it would often be using the latest upcoming languages. And that meant that the cool things I set out to make withered when the initial bump set in.</p>

<h2>The initial bump</h2>

<p>With the initial bump I mean that not only that you&rsquo;re not experienced in the new language, things take longer time because less time have been put into get things to work. Documentation is not there yet, libraries break with new versions, you get errors just trying to setting up the dev enviroment, error messages are obscure and no one else seems to have all the problems you&rsquo;re having.</p>

<p>The initial bump extends beyond just getting a working dev environment up and running. It also means less powerful IDE / editors, less tools (e g debugging, package management, build systems) and less frameworks and libraries with respectively less production time under their wings to choose from. In short, you&rsquo;ll do more work because less time has been put into the thing you&rsquo;re trying to run. And that costs &ndash; in time and focus.</p>

<p>The perhaps unglamorous alternative to this is using stuff you know well. Chances are that this is to the right on the adoption curve. But it&rsquo;ll buy you something &ndash; time and focus.</p>

<h2>Old tech = new domain?</h2>

<p>By using the tools, frameworks and language you know best you&rsquo;ll steer clear of the initial bump. And you&rsquo;ve freed up time to explore another side of programming &ndash; getting to know a new domain and solving its problems not being slowed down by your tools.</p>

<p>It&rsquo;s like learning to drive vs driving, at first you&rsquo;re so occupied with the mechanics of driving that you can&rsquo;t be bothered with the traffic ahead. Its first when you know the mechanics that you can focus on the actual driving from A to B.</p>

<h2>Possibly leverage with a new language</h2>

<p>If you&rsquo;ve made a prototype using tools you know you&rsquo;re in a much better spot of rewriting it in some other language / framework. You are now choosing tools based on your domain knowledge, this is a huge advantage &ndash; you&rsquo;re running the tools and not vice versa.</p>

<h2>Leverage old tech and iterate faster</h2>

<p>Again, a <a href="http://catchmecode.com/blog/2013/07/15/fast-programmers/">speech about going fast</a>. But really, I think that pragmatism and knowing when it&rsquo;s good enough is highly learnable. But you got to set out doing so with a clear mind. Using the languages, tools and stuff you know best will let you focus 100% on going fast in a new domain. Churn out really dirty but working code just to experience and get the feel of what it&rsquo;s like. It&rsquo;s ok, set out milestones when you refactor and tidy up.</p>

<p>At least for me, when trying out a new idea its important to go fast from idea to prototype. Instead of getting stuck in the setup and loosing steam (and possibly even giving up on the idea before its even been test driven) &ndash; leverage everything you possibly can to get it to a working state. By using the tech you know you probably also know what frameworks and libs to use (and chances are that there&rsquo;s plenty more of them out there since again you&rsquo;re using a language with more adopters) you compound on your existing knowledge. You can make more critical judgments on claims of what works (for you) and what does not.</p>

<p>This also ties in with a lot of blogposts I&rsquo;ve been reading on startups. Many of those who succeed <a href="http://www.paulgraham.com/13sentences.html">launch fast and get it right afterwards</a> &ndash; screw the details, we&rsquo;ll figure those out later when we&rsquo;re actually making some money. By using tools and products you know you&rsquo;ll steer clear of the inital bump, and if you&rsquo;re wise you stay to the right on the adoption curve, where there are powertools, battle proven VMs and industrial strength IDE&rsquo;s. It&rsquo;s ok &ndash; if you succeed you now have a luxury problem of switching languages and frameworks. With all that knowledge of what did and didn&rsquo;t work.</p>

<h2>Do share</h2>

<p>Now I&rsquo;m aware that by using older tech you are piggybacking on those that did take time to get things working and writing frameworks etc. And by doing so you might not have something as tangible as a fresh framework to share (or if you do its of less value beeing the nth framework of that kind and not the first or second).</p>

<p>But, you can share the domain problems you ran into and how you solved them. Hopefully that&rsquo;ll feedback to those on the forefront of some new tech getting perspective on what they build might be used to solve &ndash; problems rarely change that much regardless of tech. So you know, at least send some love to those brave enough to not take this advice and to go head on with the left of the adoption curve.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fast programmers]]></title>
    <link href="http://catchmecode.com/blog/2013/07/15/fast-programmers/"/>
    <updated>2013-07-15T22:25:00+02:00</updated>
    <id>http://catchmecode.com/blog/2013/07/15/fast-programmers</id>
    <content type="html"><![CDATA[<p>The legend has it that the best programmers are a <a href="http://www.construx.com/10x_Software_Development/Productivity_Variations_Among_Software_Developers_and_Teams__The_Origin_of_10x/">magnitude better than the average one</a>. Having worked with some that I&rsquo;m suspecting (or at least hoping so the rest of us mortals have some chance left :) would be in the top echelon I&rsquo;ve tried to draw wisdom from these people on what makes a really fast programmer.</p>

<p>Lets start with some rampant stereotyping into two categories!</p>

<h2>The fast but sloppy</h2>

<p>These are only seemingly fast. They tend to push work (although I think its unintentional) onto others thereby making them look fast. The speed comes from skipping on tests and edge cases. Some might even appear to be superhuman since they would be in the top bracket even if they would take the time to make their code high quality.</p>

<p>The thing is that the work they&rsquo;re supposed to do winds up at other peoples desks in forms of bugs and hard-to-impossible to read code. So the amount of work you save on one guy is just moved (and multiplied by the amount of people) to another place. Unfortunately its very hard to track and prove. Bugs might not appear for months and unmaintainable code takes considerable time to surface and rear its ugly head.</p>

<p>These are not what I consider fast. These are only fast by omission.</p>

<h2>The fast and precise</h2>

<p>This is the recruiters pot of gold. The really fast but also precise and annoyingly almost always right. How do they do what they do?</p>

<p>This is purely from what I&rsquo;ve seen myself watching these guys in action. I&rsquo;ve tried to interview some that I would consider being in this category &ndash; but I&rsquo;m guessing its a bit like asking Picasso how to paint: &ldquo;Uh, dude .. just grab a brush and go&rdquo; (In my head this is exactly how Picasso would reply :) &ndash; the replies didn&rsquo;t reveal much. So with those replies I&rsquo;ve gathered that its not something that&rsquo;s intentionally being turned on or done on purpose. Its seems almost as a reflex.</p>

<h2>Insane focus</h2>

<p>This is the first and probably most important point. An absolutely unwavering focus. Everything but the problem at hand is secondary.</p>

<p>If you spend 5 minutes on youtube or twitter you know you&rsquo;ve lost 5 + about 15 minutes (in context reset mode). Multiply this by the productivity of really good programmer and you&rsquo;ve lost considerable distance already. By just zoning off for 5 minutes.</p>

<p>Not everyone can keep this focus as I&rsquo;ve seen these guys do. I&rsquo;m guessing its part built-in and part having the right tasks. But I do think that focus can be trained far more than what most have built-in.</p>

<p>This does not mean take no breaks. Do take breaks if you&rsquo;re getting unfocused. We all have diffrent limits for how long we can keep at it. But here&rsquo;s the kicker &ndash; take a break only after you&rsquo;ve had a good productive run. Not before or during &ndash; because then there will be no productive run.</p>

<h2>Iterate faster</h2>

<p>Armed with the unwavering focus is a just as unwavering will to move forward. I mean move forward as in get your hands dirty. A <a href="http://www.codinghorror.com/blog/2004/09/development-is-inherently-wicked.html">wicked problem</a> is a problem that cannot be solved until it has been solved. And I agree with the link &ndash; most software development problems are inherently wicked. You just have to try stuff until you find a way that works (note: not the right way &ndash; the fastest working way will do just fine).</p>

<p>This means not overengineering solutions or <a href="http://catchmecode.com/blog/2013/06/15/bug-repellants/">setting breakpoints on a bug right away wihtout speculating first</a>. Get data and experience just enough solve the problem here and now. Tomorrow everything will change anyway &ndash; just go, start trying out solutions. The faster you can try it out &ndash; the faster you can discard it and move on to the next. And it has to be done in practice at the keyboard.</p>

<h2>Produce more</h2>

<p>This ties in with all of the above &ndash; <a href="http://sivers.org/qlq">the more you produce the better and faster you get at it</a>. The fast programmers produces more code because they&rsquo;ve already produced more code. The gap widens.</p>

<h2>What to do with this?</h2>

<p>Cultivate focus. Mediation is said to <a href="http://www.time.com/time/health/article/0,8599,2008914,00.html">help</a>. Try that. But first and foremost &ndash; try to get interested in what you do right now and ignore the rest of the world. Really sink into it. <a href="http://catchmecode.com/blog/2013/03/16/boredom-the-hidden-asset/">Use boredom</a> to lead the way.</p>

<p>Try to get more interesting tasks. This way, having focus might not be so hard. If you&rsquo;re a good programmer &ndash; chances are you&rsquo;ll get to pick tasks and assigments earlier and earlier thusly getting the goodies first. So it spirals upwards &ndash; you keep focus and produce more because you get more interesting tasks.</p>

<p>Cultivate fearlessness and pragmatism. Try something. Didn&rsquo;t work? Good, now you know. Now try something else (i e iterate faster &ndash; get more experience on the problem, the domain and your tools).</p>

<p>Don&rsquo;t confuse sloppiness with being fast. This is the dark side of the force. Don&rsquo;t go there&hellip; it will catch up with you.</p>

<p>As said, this seems to be built-in for most of the fast programmers I&rsquo;ve talked to. But that does not mean you should stop trying to emulate that &ndash; au contraire! If practiced enough it might become second nature to you too..</p>

<p>And all of this is summarized in the words of my imaginary Picasso: &ldquo;Uh, dude.. just grab the keyboard and go&rdquo;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bug repellants]]></title>
    <link href="http://catchmecode.com/blog/2013/06/15/bug-repellants/"/>
    <updated>2013-06-15T22:48:00+02:00</updated>
    <id>http://catchmecode.com/blog/2013/06/15/bug-repellants</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve seen this go down a fair amount of times &ndash; myself included. I just know why its happening, right. Its this damn line here &ndash; there is something with this function call. Change it a bit at random, run a test, see it fail. Why in the name of S is this still failing? Change some more at random &ndash; google what I <em>know</em> is the problem &ndash; see it fail again. Sounds familiar, right?</p>

<p>My biases on where the problem was and what caused it has cost me a fair of amount of time wasted. Its also the greatest hurdle to get past (since your ego is involved). About 90% of the time if I don&rsquo;t solve the bug in 30 seconds &ndash; its not the cause I thought it was. It usually turns out to be something very different. And the way to get from here to there is to let go of whatever cause you had pictured in your head.</p>

<h2>Get verifiable data</h2>

<p>The first step is to free yourself from whatever you think of the bug. Its crucial to keep all options open and then narrow down on the causes and fixes. Take a step back (and some fresh coffee), free of your biases and look at the situation. You need some kind of data to work with. Just guessing at random will not help you (has it ever really?).</p>

<p>I&rsquo;m fairly reluctant to label the bug too specifically in order to remind myself that it might not be what I&rsquo;m looking for. Rattling of a &ldquo;oh, its a threading issue&rdquo; too soon might cut you off from the real cause. Perhaps its not a threading issue at all &ndash; it just looks like it from a distance.</p>

<h2>Ground zero</h2>

<p>First step &ndash; where does it occur? In some cases such as an exception, its obvious where it occurs. Or is it? What if its an exception caught and rethrown silently? Go to the line and look at it. Make sure you&rsquo;re looking at the right line.</p>

<p>Can you get it to fail each time? Can you set up some scaffolding to get it into the fail-state? Are you sure its only here? Are there any other paths to where it seems to occur? Can you do some auxiliary small tests to verify that its really where you think it is?</p>

<p>You need to make sure you&rsquo;re looking at the right neighborhood. If its vague &ndash; acknowledge that its vague so you don&rsquo;t get the wrong impression of knowing where to look. Avoid labeling it.</p>

<h2>Breakpoints</h2>

<p>For zeroing in on bugs that you don&rsquo;t know where they fail &ndash; but you now can reproduce the failure each time &ndash; breakpoints is an indispensible tool.</p>

<p>If your language supports debugging via breakpoints &ndash; good for you :) If not, use good &lsquo;ol print statements. Put a breakpoint far enough up in the call stack so you don&rsquo;t miss it (unless its a very specific error, such as a NullPointer &ndash; then you can set a breakpoint on the NullPointer exception itself and work backwards).</p>

<p>What does the state look like when the bug occurs? The stack trace? Can you go up the stack trace to see who called you and what their state looked like? Can someone else in turn affect the one calling you and so on? Can you compare this state with a stable state you know does the right thing?</p>

<h2>Change state</h2>

<p>If your language and tool supports changing values while hanging on a breakpoint &ndash; can you change some parameters to get it working? Can you inspect the state of the variables and the stack trace of what got you there? Is there any other way to get here or affect the state you&rsquo;re currently looking at? If not, use simple assignments along the way to affect the state.</p>

<p>Input other data than what you normally put in. Does it still fail? Can you alter the code path so it works?</p>

<h2>Last known stable state</h2>

<p>Next step once you have established where it occurs is to have something to compare it with that you know works / is right. Is there one? If so, can you revert to it (you did commit did you not?). Start from there and trace forward to where the bug was introduced. If you use git &ndash; <a href="https://www.kernel.org/pub/software/scm/git/docs/git-bisect.html">git bisect</a> was done for this.</p>

<p>Can you compare some logs, files, state, stacktrace of when it works the way you want it to? Can you do some auxiliary experiments to get a working stable state to compare with?</p>

<h2>Git blame</h2>

<p>Why is it here? What&rsquo;s the surroundings of the bug? Can you get some historical facts on why it looks like it does? Has there been much action in this area lately (or things that are related to it?). Does the commit message give you some hints on why?</p>

<p>Just knowing when it was introduced (around what time) may give you hints as to what else was going on at that time what might have caused it. Another useful thing is that it might be a bug that someone now relies on. So its actually more of intended (incidental) behavior. Check that if you do fix this nothing else breaks.</p>

<h2>Read up</h2>

<p>This comes fairly low on the list because it should be used with caution. Its very easy to get distracted and mislead by seemingly similar problems that others might have. Do check &ndash; but take everything you read with a big pinch of salt. Keep in mind that you&rsquo;re reading the textual representation of their interpretation of the problem. Maybe they haven&rsquo;t gone through the same thorough investigation you just had (you did get verifiable data, right? :).</p>

<p>When using some someone elses library its more useful &ndash; after you&rsquo;ve established that the problem is in someone elses library. Has someone else had a similar problem? If so &ndash; how did they solve it? If not &ndash; how probable is it that you&rsquo;re the only one in the world experiencing this? That last part is aimed at stopping the &ldquo;its a bug in the OS&rdquo; type of answers. If its an OS its very well used and thusly its very probable its an already known bug &ndash; and if not it&rsquo;s probably in your code. Not theirs.</p>

<p>What does any documentation say? Have you made the right assumptions? Is there any pre-cond you&rsquo;re not aware of? Are you using it the way its meant to be used? Can you get the source for whatever you&rsquo;re looking at (and start from step #1 again above, this time in their code base?)</p>

<h2>Questions?</h2>

<p>This post came off more as a huge pack of questions than I originally had planned &ndash; but then again, this is usually how (successful) debugging sessions go. A huge amount of questions thrown around to establish where, why and finally how to fix it. Its by no means exhaustive as every bug and every situation is a bit different. These are just the main tools I usually go for when facing an unknown problem.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Phone meetings]]></title>
    <link href="http://catchmecode.com/blog/2013/05/10/phonemeetings/"/>
    <updated>2013-05-10T21:52:00+02:00</updated>
    <id>http://catchmecode.com/blog/2013/05/10/phonemeetings</id>
    <content type="html"><![CDATA[<p>This happens often enough to qualify for a post. Phone meetings. The one where you call in to synchronize some process or project. My workplace does a fair amount of integrations (i e sending data from us to them or vice versa) that this is a real problem. As an agile team, no wait, strike that.. as a team who like to get stuff done have to fend ourselves from spending too much time in those.</p>

<p>Lets delve into this a bit, shall we?</p>

<h2>Background</h2>

<p>Let&rsquo;s clarify first &ndash; I&rsquo;m all for keeping close contact (if needed) and synchronizing schedules. This is pivotal to meeting the integration deadline. Its very dissatisfying to really push through an integration only to find out that the other side is not nearly done. Your code will be in a vacuum until they start testing their pieces and you&rsquo;ll have to go back and fix all the tings uncovered during their test phase. Nope, it&rsquo;s about the medium (phone) and the scheduling (not governed by technical needs).</p>

<h2>4k bandwidth impediment</h2>

<p>Software, data-exchange formats and the likes are no pick nick doing in person. I know that if we have a whiteboard it&rsquo;ll take some time to understand each other, and another chunk of time to get a solution in place. Imposing an artificial impediment such as no visual information and only 4k of bandwidth (fixed phone lines) makes little sense coming from a technical perspective.</p>

<p>I understand that phone is the second best medium for dealing with human relations &ndash; but in technical discussions where the objective is to flesh out the details of a transfer format or what webservice port we&rsquo;re using its maybe the nth best medium. Way superior is something visual &ndash; such as mail and or lo-fi snapshots of whiteboards &ndash; details needs to be in writing.</p>

<h2>Imposed scheduling</h2>

<p>A first meeting is ok &ndash; preferably a short one where we say &ldquo;I&rsquo;m Jonas  &ndash; a developer. I&rsquo;ll be handling the integration from our side. Oh, you&rsquo;re using .NET? Ok, good to know for webservice quirks and BOM characters. Now, can we go offline and do the rest via mail? Great, nice talking to you all, we&rsquo;ll keep you updated on the progress&rdquo;. We are humans after all and a voice and a name goes a long way in better cooperation.</p>

<p>But really, more than that first startup meeting is rarely a good use of time. Now, this is highly dependent on the project manager on the other side. If we&rsquo;re lucky, they are ok with an on a need to know basis &ndash; i e when we hit cases not covered by specs. Most of the time though there are meetings scheduled more out of management needs &ndash; e g a status meeting 1h each week to follow up on anything that happened last week. I like to think of these meetings <a href="http://simpsonswiki.net/wiki/Everything's_OK_alarm">the everything&rsquo;s ok alarm</a>. Or worse, those weekly meetings plus a new meeting anytime a mail even mentions the words problem, bug, issue or the likes.</p>

<p>This gets in the way of producing code &ndash; problems rarely align to weekly meetings and weekly meetings are rarely interesting in full to all parties involved.</p>

<h2>They are not stupid</h2>

<p>As said from the outset this might seem outlandish to an agile small team &ndash; but lets consider context. I&rsquo;m guessing it makes very much sense in other organizations to have many and recurring meetings. It may be a large corporation where this is the only way managers can keep up with how the project evolves. Being small and agile largely cuts this out. Also consider that many things that seems stupid now started out as being helpful (TPS reports etc) only to later evolve into something that may not be so helpful now &ndash; except that there is no better alternative. Or that none dares to go differently.</p>

<h2>You might be the weird one</h2>

<p>At many places things don&rsquo;t happen because someone says so &ndash; things happen because there are follow up meetings and agendas. Trying to get out of meetings might signal that you&rsquo;re work shy. Explain very thoroughly how you work and what you will deliver at what point in time.</p>

<h2>You might be a tiny part of it</h2>

<p>Sometimes its hard to gauge the size of the project on the other side. You might be a tiny part in the whole &ndash; it&rsquo;s just that its not apparent. The file you are sending their way might be processed in 15 different systems and all of them needs to implement this new feature. You&rsquo;ll be spending lots of time listening to their issues and scheduling synchronizations. This is not in defense of huge meetings &ndash; but its often a reality and might be of some comfort when trying to understand why there are 10 people in this meeting when you are sending 1 file.</p>

<h2>Eject early, eject often</h2>

<p>There is hope however. It may not have to be like this, or it can at least be brought down to a lesser level:</p>

<h2>Inversion of control</h2>

<p>In the initial meeting, try to figure out who&rsquo;s the key technical person on the other side. Get their mail (and phone number if needed). If you&rsquo;re lucky you can go straight to that person and most things never have to escalate beyond you two (except when it actually is a problem for the whole project). The technician on the other side might be interested in this too &ndash; most coders face the same problem with tech specs over phone and meetings gets in the way of producing code.</p>

<p>And if no one seems to be the key person &ndash; try to see if someone gives you coherent and intelligent answers. Maybe they can point you in the right direction. Mail only the person you think know have the answer, avoid cc:ing lots of people (unless you&rsquo;ve promised some project manager to cc your conversation. Include only them in that case). Mail threads tend to accelerate the number of people on the send list fast and if it grows big enough it might trigger a new meeting.</p>

<h2>Get a goal keeper</h2>

<p>This should ideally be your project owner or someone who carries enough weight that if they say &ldquo;we&rsquo;re doing fine&rdquo; &ndash; its assumed you&rsquo;re actually doing fine. This person participates in any weekly status meetings on your behalf. Send him a status report saying &ldquo;we&rsquo;re ok&rdquo; (if you&rsquo;re ok) and ask for condensed information that pertains you (it&rsquo;s usually very little). The product owner might be interested in covering for you since its project time spent in meetings that could have been used more wisely.</p>

<h2>Round robin the role</h2>

<p>If none of the above works &ndash; share the burden. You&rsquo;re doing a good thing &ndash; freeing up the rest of the team to get some work done. They&rsquo;ll get a good laugh when you roll your eyes and do the talking hand motion &ndash; and they&rsquo;ll probably back you up with videos of funny cats and capybaras to ease your pain. And next time you&rsquo;re off the hook.</p>
]]></content>
  </entry>
  
</feed>
